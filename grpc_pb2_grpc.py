# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_pb2 as grpc__pb2


class GreeterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createUser = channel.unary_unary(
                '/greet.Greeter/createUser',
                request_serializer=grpc__pb2.User.SerializeToString,
                response_deserializer=grpc__pb2.Users.FromString,
                )
        self.getUser = channel.unary_unary(
                '/greet.Greeter/getUser',
                request_serializer=grpc__pb2.requestUser.SerializeToString,
                response_deserializer=grpc__pb2.Users.FromString,
                )
        self.deleteUser = channel.unary_unary(
                '/greet.Greeter/deleteUser',
                request_serializer=grpc__pb2.User.SerializeToString,
                response_deserializer=grpc__pb2.mensagemVazia.FromString,
                )
        self.updateUser = channel.unary_unary(
                '/greet.Greeter/updateUser',
                request_serializer=grpc__pb2.requestUpdate.SerializeToString,
                response_deserializer=grpc__pb2.Users.FromString,
                )
        self.userList = channel.unary_unary(
                '/greet.Greeter/userList',
                request_serializer=grpc__pb2.mensagemVazia.SerializeToString,
                response_deserializer=grpc__pb2.UserList.FromString,
                )
        self.userMosquitto = channel.unary_unary(
                '/greet.Greeter/userMosquitto',
                request_serializer=grpc__pb2.mensagemVazia.SerializeToString,
                response_deserializer=grpc__pb2.mensagemVazia.FromString,
                )


class GreeterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def userList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def userMosquitto(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createUser': grpc.unary_unary_rpc_method_handler(
                    servicer.createUser,
                    request_deserializer=grpc__pb2.User.FromString,
                    response_serializer=grpc__pb2.Users.SerializeToString,
            ),
            'getUser': grpc.unary_unary_rpc_method_handler(
                    servicer.getUser,
                    request_deserializer=grpc__pb2.requestUser.FromString,
                    response_serializer=grpc__pb2.Users.SerializeToString,
            ),
            'deleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteUser,
                    request_deserializer=grpc__pb2.User.FromString,
                    response_serializer=grpc__pb2.mensagemVazia.SerializeToString,
            ),
            'updateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.updateUser,
                    request_deserializer=grpc__pb2.requestUpdate.FromString,
                    response_serializer=grpc__pb2.Users.SerializeToString,
            ),
            'userList': grpc.unary_unary_rpc_method_handler(
                    servicer.userList,
                    request_deserializer=grpc__pb2.mensagemVazia.FromString,
                    response_serializer=grpc__pb2.UserList.SerializeToString,
            ),
            'userMosquitto': grpc.unary_unary_rpc_method_handler(
                    servicer.userMosquitto,
                    request_deserializer=grpc__pb2.mensagemVazia.FromString,
                    response_serializer=grpc__pb2.mensagemVazia.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'greet.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Greeter/createUser',
            grpc__pb2.User.SerializeToString,
            grpc__pb2.Users.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Greeter/getUser',
            grpc__pb2.requestUser.SerializeToString,
            grpc__pb2.Users.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Greeter/deleteUser',
            grpc__pb2.User.SerializeToString,
            grpc__pb2.mensagemVazia.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Greeter/updateUser',
            grpc__pb2.requestUpdate.SerializeToString,
            grpc__pb2.Users.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def userList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Greeter/userList',
            grpc__pb2.mensagemVazia.SerializeToString,
            grpc__pb2.UserList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def userMosquitto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Greeter/userMosquitto',
            grpc__pb2.mensagemVazia.SerializeToString,
            grpc__pb2.mensagemVazia.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
